{"ast":null,"code":"var _jsxFileName = \"/home/hirva/Documents/GitHub/emoji-dictionary/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar emojiDictionary = {\n  \"üòä\": \"smile\",\n  \"ü§ó\": \"hug\",\n  \"üôÑ\": \"rolling eyes\",\n  \"üò∞\": \"anxious\",\n  \"ü§´\": \"shush\",\n  \"ü•±\": \"yawn\",\n  \"‚ù§Ô∏è\": \"love\"\n};\nvar emojisWeKnow = Object.keys(emojiDictionary);\nexport default function App() {\n  _s();\n\n  const [meaning, setMeaning] = useState(\"\");\n\n  function emojiInputHandler(event) {\n    var userInput = event.target.value;\n    var meaning; // if (meaning === undefined) {\n    //   meaning = \"not defined\";\n    // }\n\n    if (userInput in emojiDictionary) {\n      meaning = emojiDictionary[userInput];\n    } else {\n      meaning = \"failed to recognise this emoji\";\n    } // console.log(meaning);\n\n\n    setMeaning(meaning);\n  }\n\n  function emojiEventHandler(emoji) {\n    // console.log(emoji);\n    var meaning = emojiDictionary[emoji];\n    setMeaning(meaning);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Emoji Dictionary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: emojiInputHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: meaning\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \" Emojis I know: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), emojisWeKnow.map(function (emoji) {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: () => emojiEventHandler(emoji),\n          style: {\n            fontSize: \"2rem\",\n            padding: \"0.5rem\",\n            cursor: \"pointer\"\n          },\n          children: [\" \", emoji, \" \"]\n        }, emoji, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"D3EHYk/guY72sUVf/VpVxg+5wZI=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/hirva/Documents/GitHub/emoji-dictionary/src/App.js"],"names":["React","useState","emojiDictionary","emojisWeKnow","Object","keys","App","meaning","setMeaning","emojiInputHandler","event","userInput","target","value","emojiEventHandler","emoji","map","fontSize","padding","cursor"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,cAAP;;AAEA,IAAIC,eAAe,GAAG;AACpB,QAAM,OADc;AAEpB,QAAM,KAFc;AAGpB,QAAM,cAHc;AAIpB,QAAM,SAJc;AAKpB,QAAM,OALc;AAMpB,QAAM,MANc;AAOpB,QAAM;AAPc,CAAtB;AAUA,IAAIC,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYH,eAAZ,CAAnB;AAEA,eAAe,SAASI,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;;AAEA,WAASQ,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC,QAAIC,SAAS,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAA7B;AACA,QAAIN,OAAJ,CAFgC,CAGhC;AACA;AACA;;AACA,QAAII,SAAS,IAAIT,eAAjB,EAAkC;AAChCK,MAAAA,OAAO,GAAGL,eAAe,CAACS,SAAD,CAAzB;AACD,KAFD,MAEO;AACLJ,MAAAA,OAAO,GAAG,gCAAV;AACD,KAV+B,CAYhC;;;AACAC,IAAAA,UAAU,CAACD,OAAD,CAAV;AACD;;AAED,WAASO,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC;AACA,QAAIR,OAAO,GAAGL,eAAe,CAACa,KAAD,CAA7B;AACAP,IAAAA,UAAU,CAACD,OAAD,CAAV;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAO,MAAA,QAAQ,EAAEE;AAAjB;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,6BACE;AAAA,kBAAKF;AAAL;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHF,eAME;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGJ,YAAY,CAACa,GAAb,CAAiB,UAAUD,KAAV,EAAiB;AACjC,4BACE;AACE,UAAA,OAAO,EAAE,MAAMD,iBAAiB,CAACC,KAAD,CADlC;AAGE,UAAA,KAAK,EAAE;AAAEE,YAAAA,QAAQ,EAAE,MAAZ;AAAoBC,YAAAA,OAAO,EAAE,QAA7B;AAAuCC,YAAAA,MAAM,EAAE;AAA/C,WAHT;AAAA,qBAKG,GALH,EAMGJ,KANH,EAMU,GANV;AAAA,WAEOA,KAFP;AAAA;AAAA;AAAA;AAAA,gBADF;AAUD,OAXA,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD;;GAjDuBT,G;;KAAAA,G","sourcesContent":["import React, { useState } from \"react\";\nimport \"./styles.css\";\n\nvar emojiDictionary = {\n  \"üòä\": \"smile\",\n  \"ü§ó\": \"hug\",\n  \"üôÑ\": \"rolling eyes\",\n  \"üò∞\": \"anxious\",\n  \"ü§´\": \"shush\",\n  \"ü•±\": \"yawn\",\n  \"‚ù§Ô∏è\": \"love\"\n};\n\nvar emojisWeKnow = Object.keys(emojiDictionary);\n\nexport default function App() {\n  const [meaning, setMeaning] = useState(\"\");\n\n  function emojiInputHandler(event) {\n    var userInput = event.target.value;\n    var meaning;\n    // if (meaning === undefined) {\n    //   meaning = \"not defined\";\n    // }\n    if (userInput in emojiDictionary) {\n      meaning = emojiDictionary[userInput];\n    } else {\n      meaning = \"failed to recognise this emoji\";\n    }\n\n    // console.log(meaning);\n    setMeaning(meaning);\n  }\n\n  function emojiEventHandler(emoji) {\n    // console.log(emoji);\n    var meaning = emojiDictionary[emoji];\n    setMeaning(meaning);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Emoji Dictionary</h1>\n      <input onChange={emojiInputHandler} />\n      <div>\n        <h2>{meaning}</h2>\n      </div>\n      <div>\n        <h3> Emojis I know: </h3>\n        {emojisWeKnow.map(function (emoji) {\n          return (\n            <span\n              onClick={() => emojiEventHandler(emoji)}\n              key={emoji}\n              style={{ fontSize: \"2rem\", padding: \"0.5rem\", cursor: \"pointer\" }}\n            >\n              {\" \"}\n              {emoji}{\" \"}\n            </span>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}